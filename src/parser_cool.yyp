%{

// C++ stuff is
#include <stdio.h>
#include <vector>
#include <cstring>
#include <math.h>
#include <iostream>

extern char yytext[];
#define YYERROR_VERBOSE 1
int yylex();
extern int yylineno;
int yycol = 0;

void yyerror(char *s)
{ 
  fflush(stdout);
  printf("Error: line %d column %d: %s\n",yylineno,yycol,s);
}

%}

/* ----------- OPTIONS ------------ */
/* ----------- Union ------------ */
%union {
  int valueInt;
  char* keyword;
  char* type;
  char* valueString;
  bool  boolean;
}

/* --------- Base Tokens ------------ */
%token <type> TYPE
%token <type> IDENTIFIER
%token <valueInt> INTEGER
%token <valueString> STRING

/* -------- Keyword Token ----------- */
%token <keyword> CLASS
%token <keyword> INHERIT
%token <keyword> CASE
%token <keyword> ESAC
%token <keyword> IF
%token <keyword> THEN
%token <keyword> ELSE
%token <keyword> FI
%token <keyword> IN
%token <keyword> LET
%token <keyword> ISVOID
%token <keyword> NEW
%token <keyword> NOT
%token <keyword> OF
%token <keyword> WHILE
%token <keyword> LOOP
%token <keyword> POOL
%token <keyword> GOES_TO

/* ------- Compare Tokens ---------- */
%token <keyword> LARROW
%token <keyword> LEQUAL
%token <keyword> RARROW

/* ------- Boolean Tokens ---------- */
%token <boolean> TRUE
%token <boolean> FALSE

/* ------------ Types ------------- */
%type < > class
%type < > commandList
%type < > command
%type < > parameters
%type < > declaration
%type < > expr
%type < > math
%type < > compare
%type < > callMethod
%type < > controlFlow
%type < > block
%type < > cases
%type < > declarationBlock
%type < > exprList

/* ------------ RULES ------------- */
%%
root : class ';' root                                             {printf("class ; root\n");}
      | class ';'                                                 {printf("class ; \n");}

class : CLASS TYPE INHERIT TYPE '{' commandList '}'               {printf("class type inherit type { commandlist }\n");}
      | CLASS TYPE '{' commandList '}'                            {printf("class type { commandlist }\n");}

commandList : command ';'  commandList                            {printf("command ; commandlist\n");}
      | command ';'                                               {printf("command ; \n");}

command : IDENTIFIER '(' parameters ')' ':' TYPE '{' expr '}'     {printf("IDENTIFIER ( parameters ) : TYPE { expr }\n");}
      | IDENTIFIER '('  ')' ':' TYPE '{' expr '}'                 {printf("IDENTIFIER ( ) : TYPE { expr }\n");}
      | declaration                                               {printf("declaration\n");}

parameters : IDENTIFIER ':' TYPE                                  {printf("IDENTIFIER : TYPE\n");}
      | IDENTIFIER ':' TYPE ',' parameters                        {printf("IDENTIFIER : TYPE , parameters\n");}

expr : NEW TYPE                                                   {printf("NEW TYPE\n");}
      | IDENTIFIER LARROW expr                                    {printf("IDENTIFIER <- expr\n");}
      | LET declarationBlock IN expr                              {printf("LET declarationBlock IN expr\n");}
      | math                                                      {printf("math\n");}
      | compare                                                   {printf("compare\n");}
      | callMethod                                                {printf("callMethod\n");}
      | controlFlow                                               {printf("controlFlow\n");}
      | '{' block '}'                                             {printf("{ block }\n");}
      | IDENTIFIER                                                {printf("IDENTIFIER\n");}
      | INTEGER                                                   {printf("INTEGER\n");}
      | STRING                                                    {printf("STRING\n");}
      | TRUE                                                      {printf(" true \n");}
      | FALSE                                                     {printf(" false \n"); }

controlFlow: IF expr THEN expr ELSE expr FI                       {printf(" IF expr THEN expr ELSE expr FI\n");}
      | WHILE expr LOOP expr                                      {printf("WHILE expr LOOP expr\n");}
      | CASE expr OF cases ESAC                                   {printf("CASE expr OF cases ESAC\n");}

cases : IDENTIFIER ':' TYPE GOES_TO expr ','                      {printf("IDENTIFIER : TYPE => expr , \n");}
      | IDENTIFIER ':' TYPE GOES_TO expr ',' cases                {printf("IDENTIFIER : TYPE => expr, cases \n");}

math : expr '/' expr                                              {printf("/\n");}
      | expr '+' expr                                             {printf("+\n");}
      | expr '-' expr                                             {printf("-\n");}
      | expr '*' expr                                             {printf("*\n");}
      | '(' expr ')'                                              {printf("()\n");}
      | '~' expr                                                  {printf("~\n");}

compare : ISVOID expr                                             {printf("ISVOID\n");}
      | expr '<' expr                                             {printf("<\n");}
      | expr LEQUAL expr                                          {printf("<=\n");}
      | expr '=' expr                                             {printf("=\n");}
      | NOT expr                                                  {printf("NOT\n");}

callMethod : expr '.' IDENTIFIER '(' exprList ')'                 {printf(" expr.IDENTIFIER(exprList)\n");}
      | expr '@' TYPE '.' IDENTIFIER '(' exprList ')'             {printf("expr@TYPE.IDENTIFIER(exprList)\n" );}
      | expr '.' IDENTIFIER '(' ')'                               {printf("expr.IDENTIFIER()\n");}
      | expr '@' TYPE '.' IDENTIFIER '(' ')'                      {printf("expr@TYPE.IDENTIFIER(exprList)\n" );}
      | IDENTIFIER '(' exprList ')'                               {printf("IDENTIFIER (exprList)\n");}
      | IDENTIFIER '(' ')'                                        {printf("IDENTIFIER ( )\n" );}

declaration : IDENTIFIER ':' TYPE                                 {printf("IDENTIFIER : TYPE\n");}
      | IDENTIFIER ':' TYPE LARROW expr                           {printf("IDENTIFIER : TYPE <- expr\n");}

declarationBlock : declaration ',' declarationBlock               {printf("declaration , declarationBlock\n");}
      | declaration                                               {printf("declaration\n");}

block : expr ';'  block                                           {printf("expr ; block\n") ; }
      | expr ';'                                                  {printf("expr ;\n");}

exprList : expr ',' exprList                                      {printf("expr ; exprList\n");}
      | expr                                                      {printf("expr\n");}
%%
